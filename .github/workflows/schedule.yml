name: "long check"

on:
  workflow_dispatch: # allows manual triggering
  schedule:
    - cron: "0 0 * * *" # runs daily at 00:00

jobs:
  check_new_commit:
    runs-on: ubuntu-latest
    outputs:
      nb_commits: ${{ steps.new_commits.outputs.nb_commits }}
    steps:
      - uses: actions/checkout@v4

      - id: new_commits
        run: echo "nb_commits=$(git log --oneline --since '24 hours ago' | wc -l)" >> $GITHUB_OUTPUT

  #
  # Check samurai with clang-tidy
  #
  #########################################################
  clang-tidy-check:
    needs: check_new_commit
    if: needs.check_new_commit.outputs.nb_commits > 0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
            ~/micromamba-root/envs/samurai-env
          key: clang-tidy

      - name: Mamba and samurai env installation
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: conda/environment.yml
          environment-name: samurai-env
          cache-environment: true

      - name: clang-tidy installation
        shell: bash -l {0}
        run: |
          conda install -y clang-tools cxx-compiler clang clangxx
          pip install compdb

      - name: Configure
        shell: bash -l {0}
        run: |
          cmake . -Bbuild -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug -DBUILD_DEMOS=ON
          compdb -p build list > compile_commands.json

      - name: run clang-tidy on samurai
        shell: bash -l {0}
        run: |
          run-clang-tidy

  #
  # Check conan build
  #
  #########################################################
  conan:
    needs: check_new_commit
    if: needs.check_new_commit.outputs.nb_commits > 0
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04
        compiler:
          # - llvm
          - gcc
        CMAKE_GENERATOR:
          - "Ninja Multi-Config"
        include: []

        # exclude:
        #   - os: windows-2022
        #     compiler: llvm

    steps:
      - uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.conan/
            ~/.cache/ccache
            ~/.cache/pip
            ~/Library/Caches/ccache
          key: conan-${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('./conanfile.py')}}
          restore-keys: |
            conan-${{ runner.os }}-${{ matrix.compiler }}-

      # Windows-specific pagefile configuration removed (Linux-only long run)

      - name: Setup Cpp
        uses: aminya/setup-cpp@v0.26.2
        with:
          compiler: ${{ matrix.compiler }}

          cmake: true
          ninja: true
          conan: true
          vcpkg: false
          ccache: false
          clangtidy: false
          task: false

          cppcheck: false

          gcovr: false
          opencppcoverage: false

      # - name: Information about ccache
      #   run: |
      #     ccache -s -v
      - name: Configure CMake
        run: |
          cmake . -B ./build -G "${{matrix.CMAKE_GENERATOR}}" -DCMAKE_BUILD_TYPE=Release -DENABLE_CONAN_OPTION=ON -DBUILD_TESTS=ON -DBUILD_DEMOS=ON
      - name: Build
        run: |
          cmake --build ./build --config Release
      # macOS-specific brew step removed (Linux-only long run)
      - name: Install Python dependencies
        if: runner.os != 'macOS'
        run: |
          pip3 install pytest h5py
      - name: Unix test
        if: runner.os != 'Windows'
        run: |
          ./build/tests/Release/test_samurai_lib
          cd tests; pytest --h5diff
      # Windows tests removed (Linux-only long run)

  #
  # Check vcpkg build
  #
  #########################################################
  vcpkg:
    needs: check_new_commit
    if: needs.check_new_commit.outputs.nb_commits > 0
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04
        compiler:
          # - llvm
          - gcc
        CMAKE_GENERATOR:
          - "Ninja Multi-Config"
        include: []

        # exclude:
        #   - os: windows-2022
        #     compiler: llvm

    steps:
      - uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/vcpkg
            ~/.cache/ccache
            ~/.cache/pip
            ~/Library/Caches/ccache
            ./build/vcpkg_installed
            ${{ env.CONAN_USER_HOME }}
            ${{ env.HOME }}/.cache/vcpkg/archives
            ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
          key: vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('./vcpkg.json')}}
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('./vcpkg.json') }}
            vcpkg-${{ runner.os }}-${{ matrix.compiler }}-
      - name: Setup Cpp
        uses: aminya/setup-cpp@v0.26.2
        with:
          compiler: ${{ matrix.compiler }}

          cmake: true
          ninja: true
          vcpkg: true
          ccache: false
          clangtidy: false
          task: false

          cppcheck: false

          gcovr: false
          opencppcoverage: false

      # - name: Information about ccache
      #   run: |
      #     ccache -s -v
      - name: Configure CMake
        run: |
          cmake -B ./build -S . -G "${{matrix.CMAKE_GENERATOR}}" -DENABLE_VCPKG=ON -DBUILD_TESTS=ON -DBUILD_DEMOS=ON
      - name: Build
        run: |
          cmake --build ./build --config Release
      # macOS-specific brew step removed (Linux-only long run)
      - name: Install Python dependencies
        if: runner.os != 'macOS'
        run: |
          pip3 install pytest h5py
      - name: Unix test
        if: runner.os != 'Windows'
        run: |
          ./build/tests/Release/test_samurai_lib
          cd tests; pytest --h5diff
      # Windows tests removed (Linux-only long run)

  # Windows long-run job removed (Linux-only schedule)

  #
  # Long-run MPI matrix (Linux)
  #
  #########################################################
  linux-mpi-long-run:
    needs: check_new_commit
    if: needs.check_new_commit.outputs.nb_commits > 0
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
    steps:
      - uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
            ~/micromamba-root/envs/samurai-env
          key: linux-mpi-long-run-${{ matrix.compiler }}
          restore-keys: |
            linux-mpi-long-run-${{ matrix.compiler }}

      - name: Mamba and samurai env installation (MPI)
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: conda/mpi-environment.yml
          environment-name: samurai-env
          cache-environment: true

      - name: Install extra deps (conda)
        shell: bash -l {0}
        run: |
          conda install -y petsc pkg-config cxx-compiler

      - name: Install Clang 18 (only when requested)
        if: matrix.compiler == 'clang'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-18

      - name: Configure (MPI)
        shell: bash -l {0}
        run: |
          if [[ "${{ matrix.compiler }}" == "clang" ]]; then
            export CC=clang-18
            export CXX=clang++-18
            export MPICH_CC=clang-18
            export MPICH_CXX=clang++-18
          fi
          cmake \
            . \
            -Bbuild \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DWITH_MPI=ON \
            -DBUILD_DEMOS=ON \
            -DBUILD_TESTS=OFF

      - name: Build demo target (single)
        shell: bash -l {0}
        run: |
          cmake --build build --target finite-volume-advection-2d --parallel 4

      - name: MPI run - advection 2D (single test)
        shell: bash -l {0}
        run: |
          set -e
          cd build
          mpiexec -n 2 ./demos/FiniteVolume/finite-volume-advection-2d --Tf 0.02 --nfiles 4 --max-level 7 --cfl 0.5 --filename FV_adv2d_test

      # Additional demo sweeps removed for initial validation
